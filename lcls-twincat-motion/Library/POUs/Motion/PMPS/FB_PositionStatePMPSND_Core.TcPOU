<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStatePMPSND_Core" Id="{9cc56e31-20ab-431f-af71-fce298d8fa94}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PositionStatePMPSND_Core
(*
    Collection of all core actions shared between all PMPS states FBs
    This is used in e.g.
    - FB_PositionStatePMPS1D
    - FB_PositionStatePMPS2D
    - ... etc.

    This handles database reading, BPTM, motor enables, virtual limits, and all FFOS.
*)
VAR_IN_OUT
    // All motors to be used in the states move, including blank/uninitialized structs.
    astMotionStageMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    // All position states for all motors, including unused/invalid states.
    astPositionStateMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    // Normal EPICS inputs, gathered into a single struct
    stEpicsToPlc: ST_StateEpicsToPlc;
    // PMPS EPICS inputs, gathered into a single struct
    stPMPSEpicsToPlc: ST_StatePMPSEpicsToPlc;
    // Normal EPICS outputs, gathered into a single struct
    stPlcToEpics: ST_StatePlcToEpics;
    // PMPS EPICS outputs, gathered into a single struct
    stPMPSPlcToEpics: ST_StatePMPSPlcToEpics;
    // The fast fault output to fault to.
    fbFFHWO: FB_HardwareFFOutput;
    // The arbiter to request beam conditions from.
    fbArbiter: FB_Arbiter;
END_VAR
VAR_INPUT
    // Set this to TRUE to enable beam parameter checks, or FALSE to disable them.
    bEnableBeamParams: BOOL;
    // Set this to TRUE to enable position limit checks, or FALSE to disable them.
    bEnablePositionLimits: BOOL;
    // Set this to the number of motors to be included in astMotionStageMax
    nActiveMotorCount: UINT;
    // The name of the device for use in the PMPS DB lookup and diagnostic screens.
    sDeviceName: STRING;
    // The name of the transition state in the PMPS database.
    sTransitionKey: STRING;
    // The current position index goal, where the motors are supposed to be moving towards.
    nCurrGoal: UINT;
    // Set this to TRUE to re-read the loaded database immediately (useful for debug)
    bReadDBNow: BOOL;
    // Set this to FALSE to load PMPS parameters locally
    bUsePmpsDB: BOOL := TRUE;
END_VAR
VAR_OUTPUT
    // The PMPS database lookup associated with the current position state.
    stDbStateParams: ST_DbStateParams;
END_VAR
VAR
    fbMotionReadPMPSDB: FB_MotionReadPMPSDBND;
    fbMotionBPTM: FB_MotionBPTM;
    fbMotionClearAsserts: FB_MotionClearAsserts;
    fbStatePMPSEnables: FB_StatePMPSEnablesND;
    fbMiscStatesErrorFFO: FB_MiscStatesErrorFFO;
    fbPerMotorFFO: FB_PerMotorFFOND;

    eStatePMPSStatus: E_StatePMPSStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF stPMPSEpicsToPlc.bMaintMode OR NOT stPMPSEpicsToPlc.bArbiterEnabled THEN
    eStatePMPSStatus := E_StatePMPSStatus.DISABLED;
ELSIF stPlcToEpics.nGetValue = 0 AND nCurrGoal = 0 THEN
    eStatePMPSStatus := E_StatePMPSStatus.UNKNOWN;
ELSIF stPlcToEpics.nGetValue = nCurrGoal THEN
    eStatePMPSStatus := E_StatePMPSStatus.AT_STATE;
ELSE
    eStatePMPSStatus := E_StatePMPSStatus.TRANSITION;
END_IF

IF bUsePmpsDB THEN
    fbMotionReadPMPSDB(
        astPositionState:=astPositionStateMax,
        fbFFHWO:=fbFFHWO,
        sTransitionKey:=sTransitionKey,
        sDeviceName:=sDeviceName,
        bReadNow:=bReadDBNow,
        astDbStateParams=>,
        bError=>,
    );
END_IF

fbMotionBPTM(
    astMotionStage:=astMotionStageMax,
    fbArbiter:=fbArbiter,
    fbFFHWO:=fbFFHWO,
    stGoalParams:=fbMotionReadPMPSDB.astDbStateParams[nCurrGoal],
    stTransParams:=fbMotionReadPMPSDB.astDbStateParams[0],
    nActiveMotorCount:=nActiveMotorCount,
    bEnable:=stPMPSEpicsToPlc.bArbiterEnabled AND bEnableBeamParams,
    bAtState:=stPlcToEpics.nGetValue = nCurrGoal AND nCurrGoal <> 0,
    sDeviceName:=sDeviceName,
    bTransitionAuthorized=>,
    bDone=>,
    bMotorCountError=>,
);

fbMotionClearAsserts(
    astDbStateParams:=fbMotionReadPMPSDB.astDbStateParams,
    fbArbiter:=fbArbiter,
    bExecute:=NOT fbMotionBPTM.bEnable,
);

fbStatePMPSEnables(
    astMotionStage:=astMotionStageMax,
    astPositionState:=astPositionStateMax,
    fbFFHWO:=fbFFHWO,
    bEnable:=bEnablePositionLimits,
    nActiveMotorCount:=nActiveMotorCount,
    nGoalStateIndex:=nCurrGoal,
    sDeviceName:=sDeviceName,
    bMaintMode:=stPMPSEpicsToPlc.bMaintMode,
    eStatePMPSStatus:=eStatePMPSStatus,
    bTransitionAuthorized:=fbMotionBPTM.bTransitionAuthorized,
    abEnabled=>,
    abForwardEnabled=>,
    abBackwardEnabled=>,
    abValidGoal=>,
    bMotorCountError=>,
);

IF bEnableBeamParams THEN
    fbMiscStatesErrorFFO.stCurrentBeamReq := fbMotionReadPMPSDB.astDbStateParams[stPlcToEpics.nGetValue].stBeamParams;
ELSE
    fbMiscStatesErrorFFO.stCurrentBeamReq := PMPS_GVL.cstFullBeam;
END_IF
fbMiscStatesErrorFFO(
    fbArbiter:=fbArbiter,
    fbFFHWO:=fbFFHWO,
    sDeviceName:=sDeviceName,
    bKnownState:=stPlcToEpics.nGetValue > 0,
    nTransitionID:=fbMotionReadPMPSDB.astDbStateParams[0].nRequestAssertionID,
);

fbPerMotorFFO(
    astMotionStage:=astMotionStageMax,
    fbFFHWO:=fbFFHWO,
    nActiveMotorCount:=nActiveMotorCount,
    sDeviceName:=sDeviceName,
    bMotorCountError=>,
);

stPMPSPlcToEpics.stTransitionDb := fbMotionReadPMPSDB.astDbStateParams[0];
stDbStateParams := fbMotionReadPMPSDB.astDbStateParams[stPlcToEpics.nGetValue];]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>