<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PositionStatePMPS2D" Id="{9dffd600-2d32-4e33-bb6b-8aab4cc29ee5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PositionStatePMPS2D
(*
    2-Dimensional position state function block with PMPS.

    This allows the user to move 2 motors among some set of named state positions with PMPS protection.

    To use a states block, you must define enums that match the state options and give them pytmc pragmas.
    See FB_PositionState1D_InOut for a simple example.
    These enums must be passed in as the eEnumSet and eEnumGet VAR_IN_OUT variables.
    The enum values must match the array indices in astPositionState1 and astPositionState2.

    A move will begin when eEnumSet is set to a positive, nonzero value. eEnumSet will be reset to 0 on every cycle, allowing us
    to accept a new, possibly conflicting, move request on the next cycle to interrupt the first.

    The motors must already be set up for point-to-point motion via FB_MotionStage, etc., for this function block to work properly.

    PMPS handling is done via database lookups by setting sPmpsState on each position state and on
    the transition state input appropriately.
*)
VAR_IN_OUT
    // The 1st motor to move
    stMotionStage1: ST_MotionStage;
    // The 2nd motor to move
    stMotionStage2: ST_MotionStage;
    // All possible position states for motor 1, including unused/invalid states.
    {attribute 'pytmc' := '
        pv: STATE:M1
        io: io
        expand: :%.2d
    '}
    astPositionState1: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    // All possible position states for motor 2, including unused/invalid states.
    {attribute 'pytmc' := '
        pv: STATE:M2
        io: io
        expand: :%.2d
    '}
    astPositionState2: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    // Set this to a nonzero value to request a new move. It will be reset to zero every cycle. This should be hooked up to a user's EPICS enum input.
    eEnumSet: UINT;
    // The current state index, or zero if we are not at a state. This should be hooked up to a user's EPICS enum output.
    eEnumGet: UINT;
    // The fast fault output to fault to.
    fbFFHWO: FB_HardwareFFOutput;
    // The arbiter to request beam conditions from.
    fbArbiter: FB_Arbiter;
END_VAR
VAR_INPUT
    // Set this to TRUE to enable input state moves, or FALSE to disable them.
    bEnableMotion: BOOL;
    // Set this to TRUE to enable beam parameter checks, or FALSE to disable them.
    bEnableBeamParams: BOOL;
    // Set this to TRUE to enable position limit checks, or FALSE to disable them.
    bEnablePositionLimits: BOOL;
    // The name of the device for use in the PMPS DB lookup and diagnostic screens.
    sDeviceName: STRING;
    // The name of the transition state in the PMPS database.
    sTransitionKey: STRING;
    // Normal EPICS inputs, gathered into a single struct
    {attribute 'pytmc' := 'pv: STATE'}
    // PMPS EPICS inputs, gathered into a single struct
    stEpicsToPlc: ST_StateEpicsToPlc;
    {attribute 'pytmc' := 'pv: STATE'}
    stPMPSEpicsToPlc: ST_StatePMPSEpicsToPlc;
    // Set this to TRUE to re-read the loaded database immediately (useful for debug)
    bReadDBNow: BOOL;
    // Set this to FALSE to load PMPS parameters locally
    bUsePmpsDB: BOOL := TRUE;
    // Local PMPSDB parameteres
    astManualDbStateParams:  ARRAY[0..GeneralConstants.MAX_STATES] OF ST_DbStateParams;
END_VAR
VAR_OUTPUT
    // Normal EPICS outputs, gathered into a single struct
    {attribute 'pytmc' := 'pv: STATE'}
    stPlcToEpics: ST_StatePlcToEpics;
    // PMPS EPICS outputs, gathered into a single struct
    {attribute 'pytmc' := 'pv: STATE'}
    stPMPSPlcToEpics: ST_StatePMPSPlcToEpics;
    // The PMPS database lookup associated with the current position state.
    stDbStateParams: ST_DbStateParams;
END_VAR
VAR
    fbCore: FB_PositionStateND_Core;
    fbPMPSCore: FB_PositionStatePMPSND_Core;
    astMotionStageMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ST_MotionStage;
    astPositionStateMax: ARRAY[1..MotionConstants.MAX_STATE_MOTORS] OF ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
astMotionStageMax[1] := stMotionStage1;
astMotionStageMax[2] := stMotionStage2;
astPositionStateMax[1] := astPositionState1;
astPositionStateMax[2] := astPositionState2;

fbCore(
    astMotionStageMax:=astMotionStageMax,
    astPositionStateMax:=astPositionStateMax,
    stEpicsToPlc:=stEpicsToPlc,
    stPlcToEpics:=stPlcToEpics,
    eEnumSet:=eEnumSet,
    eEnumGet:=eEnumGet,
    bEnable:=bEnableMotion,
    nActiveMotorCount:=2,
    nCurrGoal=>,
);
fbPMPSCore(
    astMotionStageMax:=astMotionStageMax,
    astPositionStateMax:=astPositionStateMax,
    stEpicsToPlc:=stEpicsToPlc,
    stPMPSEpicsToPlc:=stPMPSEpicsToPlc,
    stPlcToEpics:=stPlcToEpics,
    stPMPSPlcToEpics:=stPMPSPlcToEpics,
    fbFFHWO:=fbFFHWO,
    fbArbiter:=fbArbiter,
    bEnableBeamParams:=bEnableBeamParams,
    bEnablePositionLimits:=bEnablePositionLimits,
    nActiveMotorCount:=2,
    sDeviceName:=sDeviceName,
    sTransitionKey:=sTransitionKey,
    nCurrGoal:=fbCore.nCurrGoal,
    bReadDBNow:=bReadDBNow,
    stDbStateParams=>stDbStateParams,
    bUsePmpsDB:=bUsePmpsDB,
    astManualDbStateParams:=astManualDbStateParams,
);

stMotionStage1 := astMotionStageMax[1];
stMotionStage2 := astMotionStageMax[2];
astPositionState1 := astPositionStateMax[1];
astPositionState2 := astPositionStateMax[2];
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>